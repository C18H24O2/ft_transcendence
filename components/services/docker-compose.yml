name: ft_trans-services

include:
  # - ./microservices/docker-compose.yml

networks:
  services:
  nginx:
  prometheus:
  valkey:

volumes:
  db:

services:
  # The global database, used for storing users, scores, game data, etc.
  # We're using PostgreSQL as per the subject's requirements
  postgres:
    image: "postgres:17.2-alpine3.21"
    env_file: ../../.env
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - services 
    ports: #TODO: this is for development only, to remove later
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: "pg_isready -U $POSTGRES_USER"
      interval: 5s
      timeout: 5s
      retries: 5

  valkey:
    image: "valkey/valkey:8.0.1-alpine3.20"
    env_file: ../../.env
    networks:
      - valkey
    restart: unless-stopped
    healthcheck:
      test: "valkey-cli ping"
      interval: 5s
      timeout: 5s
      retries: 5

  # RabbitMQ is a fast message queue, used for quick inter-process communication
  rabbitmq:
    build:
      context: rabbitmq
      dockerfile: Dockerfile
    env_file: ../../.env
    networks:
      - services
      - nginx
      - prometheus
    ports: #TODO: this is for development only, to remove later
      - "7815:7815"
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 30s
      retries: 10

  # A hacky way to get docker-compose to build an image for us. yeah, sexy.
  service-runtime-builder:
    image: ft_trans-service_runtime
    build:
      context: service-runtime
      dockerfile: Dockerfile
    env_file: ../../.env
    restart: no

  # The primary API service, 
  api-service:
    build:
      context: api-service
      dockerfile: Dockerfile
    env_file: ../../.env
    networks:
      - services
    ports:
      - "6969:6969"
    restart: unless-stopped
    stop_signal: SIGINT
    healthcheck:
      test: ["CMD-SHELL", "curl -H 'ft_trans-healthcheck/1.0' http://localhost:6969/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      service-runtime-builder:
        condition: service_completed_successfully
