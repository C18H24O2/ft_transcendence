worker_processes auto;
worker_rlimit_core 500M;

# Load custom-built modules (built in the Dockerfile)
load_module /etc/nginx/modules/ngx_http_modsecurity_module.so;
load_module /etc/nginx/modules/ngx_http_brotli_filter_module.so;
load_module /etc/nginx/modules/ngx_http_brotli_static_module.so;

events {
	accept_mutex off;
	worker_connections 1024;
	multi_accept on;
	use epoll;
}

http {
	include mime.types;
	default_type application/octet-stream;

	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

	# Timeouts
	client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;
	
	# Features
	access_log /dev/stdout;
	autoindex off;
	fastcgi_buffer_size 16k;
    fastcgi_buffers 4 16k;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;

	# Gzip compression 
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gunzip on;
    gzip_proxied any;
    gzip_comp_level 9;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 1000;
    gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript;

	# Brotli compression
	brotli on;
	brotli_static on;
	brotli_comp_level 6;
	brotli_buffers 16 8k;
	brotli_min_length 1000;
	brotli_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript;

	# Prevent clickjacking
	add_header X-Frame-Options "SAMEORIGIN";
	# Prevent MIME sniffing
	add_header X-Content-Type-Options "nosniff";
	# HSTS
	add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";
	# XSS
	add_header X-XSS-Protection "1; mode=block";

	# Don't cache (TODO: make this better?)
	add_header Cache-Control "no-cache, no-store";

	# Redirect HTTP to HTTPS
	server {
		listen 80 default_server;
		listen [::]:80 default_server;

		server_name _;

		location ~ /\.ht {
			deny all;
		}

		location ~ /\.git {
			deny all;
		}

		location ~ /\.env {
			deny all;
		}

		# redirect to HTTPS
		return 301 https://$host$request_uri;
	}

	# Handle HTTPS
	server {
		server_name _;

		# Setup SSL
		listen 443 ssl;
		listen [::]:443 ssl;
		ssl_certificate /etc/nginx/certs/ssl.crt;
		ssl_certificate_key /etc/nginx/certs/ssl.key;

		modsecurity on;
		modsecurity_rules_file /etc/nginx/modsec/main.conf;

		# Serve the frontend app via website-service
		location / {
			proxy_pass http://website-service:42069;
			proxy_http_version 1.1;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
		}

		# Reverse-proxy to the REST API
		# location /api/v1/ {
		# 	proxy_pass http://api-service:6969;
		# 	proxy_http_version 1.1;
		# 	proxy_set_header Host $host;
		# 	proxy_set_header X-Real-IP $remote_addr;
		# 	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		# 	proxy_set_header X-Forwarded-Proto $scheme;
		# }

		# Expose nginx status
		location /nginx-status/ {
			stub_status on;
			access_log off;
			# allow 127.0.0.1;
			# deny all;
		}

		# Reverse-proxy to Grafana
		location /grafana/ {
			rewrite ^/grafana/(.*)$ /$1 break;
			proxy_pass http://grafana:3000;
			proxy_http_version 1.1;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
		}

		# Reverse-proxy to RabbitMQ's web management interface
		location /rabbitmq/ {
			rewrite ^/rabbitmq/(.*)$ /$1 break;
			proxy_pass http://rabbitmq:15672;
			proxy_http_version 1.1;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
		}

		# location /ws/ { # useless, will go in /api/v1/game/<game_id>/ws
		# 	proxy_pass http://api-service:42069;
		# 	proxy_http_version 1.1;
		# 	proxy_set_header Upgrade $http_upgrade;
		# 	proxy_set_header Connection "upgrade";
		# 	proxy_set_header Host $host;
		# 	proxy_set_header X-Real-IP $remote_addr;
		# 	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		# 	proxy_set_header X-Forwarded-Proto $scheme;
		# }
	
		# Reverse-proxy to HashiCorp Vault
		# location /vault/ {
		#     rewrite ^/vault/(.*)$ /$1 break;
		# 	proxy_pass http://vault:8200;
		# 	proxy_http_version 1.1;
		# 	proxy_set_header Host $host;
		# 	proxy_set_header X-Real-IP $remote_addr;
		# 	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		# 	proxy_set_header X-Forwarded-Proto $scheme;
		# }

		# error_page   500 502 503 504  /50x.html;
		# location = /50x.html {
		# 	root html;
		# }
	}

	# Set preferred SSL protocols and ciphers
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
}
